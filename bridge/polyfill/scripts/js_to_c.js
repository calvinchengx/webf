const minimist = require('minimist');
const Qjsc = require('qjsc');
const argv = minimist(process.argv.slice(2));
const path = require('path');
const fs = require('fs');

const qjsc = new Qjsc();

if (argv.help) {
  process.stdout.write(`Convert Javascript Code into Cpp source code
Usage: node js_to_c.js -s /path/to/source.js -o /path/to/dist.cc -n polyfill\n`);
  process.exit(0);
}

const getPolyFillHeader = (outputName) => `/*
 * Generated by WebF PolyFill scripts.
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef ${outputName.toUpperCase()}_H
#define ${outputName.toUpperCase()}_H

#ifdef __cplusplus
extern "C" {
#endif

#include <quickjs/quickjs.h>

void initWebF${outputName}(JSContext* ctx);

#ifdef __cplusplus
}
#endif

#endif // ${outputName.toUpperCase()}_H
`;

const getPolyFillJavaScriptSource = (source) => {
  let byteBuffer = qjsc.compile(source, {
    sourceURL: 'vm://polyfill.js'
  });
  let uint8Array = Uint8Array.from(byteBuffer);
  return `static size_t byteLength = ${uint8Array.length};
static uint8_t bytes[${uint8Array.length}] = {${uint8Array.join(',')}};`;
};

const getPolyfillEvalCall = () => {
  return `JSValue obj, val;
  obj = JS_ReadObject(ctx, bytes, byteLength, JS_READ_OBJ_BYTECODE);
  if (JS_IsException(obj)) {
    return;
  }
  val = JS_EvalFunction(ctx, obj);
  if (JS_IsException(val))
    return;
  JS_FreeValue(ctx, val);`;
}

const getPolyFillSource = (source, outputName) => `/*
* Copyright (C) 2019-2022 The Kraken authors. All rights reserved.
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/

#include "${outputName.toLowerCase()}.h"

#ifdef __cplusplus
extern "C" {
#endif

${getPolyFillJavaScriptSource(source)}

void initWebF${outputName}(JSContext* ctx) {
  ${getPolyfillEvalCall()}
}

#ifdef __cplusplus
}
#endif

  `;

  function convertJSToCpp(code, outputName) {
    return getPolyFillSource(code, outputName);
  }

let source = argv.s;
let output = argv.o;
let outputName = argv.n || 'PolyFill';

if (!source || !output) {
  console.error('-s and -o params are required');
  process.exit(1);
}

function getAbsolutePath(p) {
  if (path.isAbsolute(p)) {
    return p;
  } else {
    return path.join(process.cwd(), p);
  }
}

let sourcePath = getAbsolutePath(source);
let outputPath = getAbsolutePath(output);

let jsCode = fs.readFileSync(sourcePath, {encoding: 'utf-8'});

let headerSource = getPolyFillHeader(outputName);
let ccSource = convertJSToCpp(jsCode, outputName);

fs.mkdirSync(outputPath, { recursive: true });
fs.writeFileSync(path.join(outputPath, outputName.toLowerCase() + '.h'), headerSource);
fs.writeFileSync(path.join(outputPath, outputName.toLowerCase() + '.c'), ccSource);
